package org.johngull.netbeans.cppcheck;

import java.awt.event.MouseEvent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 *
 * @author Vitaly Bondar
 */

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.johngull.netbeans.cppcheck//SA//EN",
autostore = false)
@TopComponent.Description(preferredID = "SATopComponent",
iconBase = "org/johngull/netbeans/cppcheck/cppcheck.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.johngull.netbeans.cppcheck.SATopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SAAction",
preferredID = "SATopComponent")
@Messages({
    "CTL_SAAction=SA",
    "CTL_SATopComponent=SA Window",
    "HINT_SATopComponent=This is a SA window"
})
public final class SATopComponent extends TopComponent {

    private static SATopComponent single_=null;
    private StaticAnalysisModel model_ = new StaticAnalysisModel();
    
    private SATopComponent() {
        initComponents();
        setName(Bundle.CTL_SATopComponent());
        setToolTipText(Bundle.HINT_SATopComponent());

        table.setModel(model_);
    }
    
    public static SATopComponent getInstance(){
        if(single_==null){
            single_ = new SATopComponent();
        }
            
        return single_;
    }
    
    StaticAnalysisModel model() {return model_;}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        add(jScrollPane1);
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        //left dbl click
        if(evt.getButton() == MouseEvent.BUTTON1 && evt.getClickCount()==2) {
            int r = table.rowAtPoint(evt.getPoint());
            if(r>-1) {
                StaticAnalysisItem item = model_.rowItem(r);
                if(item!=null)
                    SourceOpener.OpenSourceLine(item.fullPath(), item.line());
            }
        }
    }//GEN-LAST:event_tableMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    public void addItem(StaticAnalysisItem item) {
        model_.addItem(item);
        //files_.add(new FileObject(item.fullPath()));
    }
}
